/*

	PROCEDURE FILE
		-Contains create commands for procedures 
		-Procedures using cursors are in a separate script file
	
	GROUP 4
		18406547 - Diwas Lamsal
		18406498 - Bhuwan Khatiwada           
		18413710 - Sandip Kumar Subba
		18413644 - Bishownath Dhakal
		
*/


--@D:\Database_Assignment_II\script\procedure_4.txt

----------------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
-----------------------------------Procedures for inserting data into tables and object tables------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

------------------------- procedure for inserting into addresses object table ------------------
						 	
CREATE OR REPLACE PROCEDURE proc_insert_addresses(in_street IN VARCHAR2:=NULL, in_city IN VARCHAR2:=NULL, in_country IN VARCHAR2:=NULL) IS

BEGIN
	INSERT INTO addresses (street,city,country)
	VALUES (in_street,in_city,in_country);
	DBMS_OUTPUT.PUT_LINE('ROW INSERTED SUCESSFULLY');
END proc_insert_addresses;
/

SHOW ERRORS;

----------------------------------------------------------------------------------------------------------------------------

------------------------- procedure for inserting into festival_natures table ------------------
						 	
CREATE OR REPLACE PROCEDURE proc_insert_festival_natures(in_name IN festival_natures.name%TYPE, in_targeted_audience IN festival_natures.target_audience%TYPE) IS

BEGIN
	INSERT INTO festival_natures (festival_nature_id,name,target_audience)
	VALUES (seq_festival_nature_id.NEXTVAL,in_name,in_targeted_audience);
	DBMS_OUTPUT.PUT_LINE('ROW INSERTED SUCESSFULLY');
END proc_insert_festival_natures;
/

SHOW ERRORS;


----------------------------------------------------------------------------------------------------------------------------

------------------------- procedure for inserting into locations table ----------------------

CREATE OR REPLACE PROCEDURE proc_insert_locations(in_capacity IN locations.capacity%TYPE,in_price IN locations.price%TYPE,in_address_ref IN VARCHAR2) IS

BEGIN 
	INSERT INTO locations (location_id,capacity,price,address)
	SELECT seq_location_id.NEXTVAL,in_capacity,in_price, REF(a)
	FROM addresses a
	WHERE a.street = in_address_ref;
	DBMS_OUTPUT.PUT_LINE('ROW INSERTED SUCESSFULLY');
END proc_insert_locations;
/

SHOW ERRORS;


----------------------------------------------------------------------------------------------------------------------------

------------------------- procedure for inserting into staff table ----------------------


CREATE OR REPLACE PROCEDURE proc_insert_staff(in_firstname VARCHAR2, in_lastname VARCHAR2, in_gender CHAR, 
											  in_num_t1 VARCHAR2, in_type_t1 VARCHAR2, 
											  in_num_t2 VARCHAR2, in_type_t2 VARCHAR2,
											  in_street_c VARCHAR2, in_city_c VARCHAR2, in_country_c VARCHAR2,
											  in_street_p VARCHAR2, in_city_p VARCHAR2, in_country_p VARCHAR2,
											  in_email VARCHAR2, in_leader NUMBER, in_salary NUMBER) IS

BEGIN
	INSERT INTO staff (staff_id, firstname, lastname, gender, contact, current_address, permanent_address, email, leader, salary)
	VALUES (seq_staff_id.NEXTVAL, in_firstname, in_lastname, in_gender, contact_detail_varray_type(contact_detail_type (in_num_t1, in_type_t1), 
																								   contact_detail_type (in_num_t2, in_type_t2))
																		, address_type(in_street_c, in_city_c, in_country_c)
																		, address_type(in_street_p, in_city_p, in_country_p)
																		, in_email, in_leader, in_salary);

    DBMS_OUTPUT.PUT_LINE('ROW INSERTED SUCESSFULLY');

END proc_insert_staff;
/

SHOW ERRORS; 

----------------------------------------------------------------------------------------------------------------------------

------------------------- procedure for inserting into festivals table ----------------------


CREATE OR REPLACE PROCEDURE proc_insert_festivals(in_festival_nature_id NUMBER, in_location_id NUMBER, in_name VARCHAR2, 
											      in_p1_name VARCHAR2, in_p1_artist VARCHAR2, in_p1_genre VARCHAR2, 
												  in_p2_name VARCHAR2, in_p2_artist VARCHAR2, in_p2_genre VARCHAR) IS

BEGIN
	INSERT INTO festivals (festival_nature_id, location_id, festival_name, performance)
	VALUES (in_festival_nature_id, in_location_id, in_name, performance_table_type(performance_type(in_p1_name, in_p1_artist, in_p1_genre),
																			  performance_type(in_p2_name, in_p2_artist, in_p2_genre)));

    DBMS_OUTPUT.PUT_LINE('ROW INSERTED SUCESSFULLY');
END proc_insert_festivals;
/

SHOW ERRORS; 

----------------------------------------------------------------------------------------------------------------------------

------------------------- procedure for inserting into festival_staff table ----------------------


CREATE OR REPLACE PROCEDURE proc_insert_festival_staff(in_staff_id IN festival_staff.staff_id%TYPE,in_festival_nature_id IN festival_staff.festival_nature_id%TYPE,in_location_id IN festival_staff.location_id%TYPE) IS

BEGIN

	INSERT INTO festival_staff (festival_staff_id,staff_id,festival_nature_id,location_id)
	VALUES (seq_festival_staff_id.NEXTVAL,in_staff_id,in_festival_nature_id,in_location_id);
    DBMS_OUTPUT.PUT_LINE('ROW INSERTED SUCESSFULLY');

END proc_insert_festival_staff;
/

SHOW ERRORS; 




----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------




--PROCEDURE TO RESET SEQUENCE

--How to reset sequence -H., Porter, D. and Heller, J. (2019) 

--This procedure takes a sequence as a parameter and resets it to 0
--Usage of EXECUTE IMMEDIATE
CREATE OR REPLACE PROCEDURE proc_reset_seq(p_seq_name IN VARCHAR2)
IS
    l_val NUMBER;
BEGIN
    EXECUTE IMMEDIATE
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;
    EXECUTE IMMEDIATE
    'alter sequence ' || p_seq_name || ' increment by -' || l_val || ' minvalue 0';
    EXECUTE IMMEDIATE
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;
    EXECUTE IMMEDIATE
    'alter sequence ' || p_seq_name || ' increment by 1 minvalue 0';
END proc_reset_seq;
/
SHOW ERRORS





----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Procedures for querying data----------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------


--Procedures using functions

----------------------------------------------------------------------------------------------------------------------------

-- This procedure displays the total number of staff
-- It uses the function func_count_staff to retrieve total number of staff
CREATE OR REPLACE PROCEDURE proc_count_staff AS
	vn_count NUMBER(5):= func_count_staff;
BEGIN
	IF vn_count>0 THEN
		DBMS_OUTPUT.PUT_LINE('There are '|| vn_count || ' staff in the system.');
	ELSE 
		DBMS_OUTPUT.PUT_LINE('There is no staff available.');
	END IF;
END proc_count_staff;
/
SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------

-- This procedure displays the total number of staff with salary higher than provided as argument
-- It uses the function func_count_staff_salary to retrieve the number of staff
CREATE OR REPLACE PROCEDURE proc_count_staff_salary(in_salary NUMBER) AS
	vn_count NUMBER(5):= func_count_staff_salary(in_salary);
BEGIN
	IF vn_count>1 THEN
		DBMS_OUTPUT.PUT_LINE('There are '|| vn_count || ' staff in the system with salary more than '|| in_salary);
	ELSIF vn_count = 1 THEN 
		DBMS_OUTPUT.PUT_LINE('There is '|| vn_count || ' staff in the system with salary more than '|| in_salary);
	ELSE	
		DBMS_OUTPUT.PUT_LINE('There is no staff with salary more than '|| in_salary);
	END IF;
END proc_count_staff_salary;
/
SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------

-- This procedure displays the total number of festivals
-- It uses the function func_count_festivals to retrieve total number of festivals
CREATE OR REPLACE PROCEDURE proc_count_festivals AS
	vn_count NUMBER(5):= func_count_festivals;
BEGIN
	IF vn_count>0 THEN
		DBMS_OUTPUT.PUT_LINE('There are '|| vn_count || ' festivals in the system.');
	ELSE 
		DBMS_OUTPUT.PUT_LINE('There is no festival available.');
	END IF;
END proc_count_festivals;
/
SHOW ERRORS


----------------------------------------------------------------------------------------------------------------------------

-- This procedure displays the highest price among the locations
CREATE OR REPLACE PROCEDURE proc_exp_location AS
BEGIN
	DBMS_OUTPUT.PUT_LINE('The most expensive location costs '|| func_exp_location);
END proc_exp_location;
/
SHOW ERRORS


----------------------------------------------------------------------------------------------------------------------------

-- This procedure displays the cheapest price among the locations
CREATE OR REPLACE PROCEDURE proc_chp_location AS
BEGIN
	DBMS_OUTPUT.PUT_LINE('The cheapest location costs '|| func_chp_location);
END proc_chp_location;
/
SHOW ERRORS


----------------------------------------------------------------------------------------------------------------------------



--Exception handling- Techonthenet.com (2019)

-------------------------------- Getting location,capacity and nature of festivals-------------------------
-- This procedure displays a festival's details 
-- It takes festival name as the parameter 
-- If the festival is not found, the error is handled and relevant message is displayed

CREATE OR REPLACE PROCEDURE proc_festival_detail(in_festival_name IN festivals.festival_name%TYPE) IS

	vc_street addresses.street%TYPE;
	vc_city addresses.city%TYPE;
	vc_country addresses.country%TYPE;
	vn_capacity locations.capacity%TYPE;
	vn_price locations.price%TYPE;
	vc_nature festival_natures.name%TYPE;
	vc_target_audience festival_natures.target_audience%TYPE;
	
BEGIN 
		SELECT l.address.street,l.address.city,l.address.country,l.capacity,l.price, fn.name,fn.target_audience 
		INTO vc_street,vc_city,vc_country,vn_capacity, vn_price, vc_nature,vc_target_audience
		FROM locations l 
		JOIN festivals f ON l.location_id = f.location_id
		JOIN festival_natures fn ON f.festival_nature_id = fn.festival_nature_id
		WHERE f.festival_name = in_festival_name;
		
		DBMS_OUTPUT.PUT_LINE('FESTIVAL DETAILS');
		DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
		DBMS_OUTPUT.PUT_LINE('Name              :'||in_festival_name);
		DBMS_OUTPUT.PUT_LINE('Location');
		DBMS_OUTPUT.PUT_LINE('--------');
		DBMS_OUTPUT.PUT_LINE('Street            :'||vc_street);
		DBMS_OUTPUT.PUT_LINE('City              :'||vc_city);
		DBMS_OUTPUT.PUT_LINE('Country           :'||vc_country);
		DBMS_OUTPUT.PUT_LINE('Capacity          :'||vn_capacity);
		DBMS_OUTPUT.PUT_LINE('Price             :'||vn_price);
		DBMS_OUTPUT.PUT_LINE('Nature');
		DBMS_OUTPUT.PUT_LINE('------');
		DBMS_OUTPUT.PUT_LINE('Nature            :'||vc_nature);
		DBMS_OUTPUT.PUT_LINE('Target Audience   :'||vc_target_audience);
		DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
		
EXCEPTION
	WHEN no_data_found THEN
		DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
		RAISE_APPLICATION_ERROR (-20001,'ERROR! NO SUCH DATA FOUND! DID YOU ENTER A VALID NAME?');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
		RAISE_APPLICATION_ERROR (-20001,'AN ERROR OCCURED');
END proc_festival_detail;
/
SHOW ERRORS
	
	
----------------------------------------------------------------------------------------------------------------------------

	
	
-------------------------- Querying staff permanent address and temporary address--------------------------
-- This procedure displays a staff's address details 
-- It takes staff_id as the parameter 
-- If the staff is not found, the error is handled and relevant message is displayed

CREATE OR REPLACE PROCEDURE proc_show_staff_address(in_staff_id staff.staff_id%TYPE) IS

-- Declaring different variable needed.

    vc_firstname staff.firstname%TYPE;
	vc_lastname staff.firstname%TYPE;
	vc_temp_street addresses.street%TYPE;
	vc_temp_city addresses.city%TYPE;
	vc_temp_country addresses.country%TYPE;
	vc_per_street addresses.street%TYPE;
	vc_per_city addresses.city%TYPE;
	vc_per_country addresses.country%TYPE;
	c_gender CHAR;
	vn_salary staff.salary%TYPE;
	vc_email staff.email%TYPE;
	vc_leader VARCHAR2(60);

BEGIN
	-- querying data from staff table
	
	SELECT s.firstname,s.lastname,s.gender,s.salary,s.email,CONCAT(CONCAT(l.firstname, ' '), l.lastname),s.permanent_address.street,s.permanent_address.city ,s.permanent_address.country ,s.current_address.street ,s.current_address.city,s.current_address.country
	INTO vc_firstname,vc_lastname,c_gender,vn_salary,vc_email,vc_leader,vc_per_street,vc_per_city,vc_per_country,vc_temp_street,vc_temp_city,vc_temp_country
	FROM staff s JOIN staff l
	ON s.leader = l.staff_id
	WHERE s.staff_id = in_staff_id;

    -- projecting output in the screen
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	DBMS_OUTPUT.PUT_LINE('Name                :'||vc_firstname||' '||vc_lastname);
	DBMS_OUTPUT.PUT_LINE('Gender              :'||c_gender );
	DBMS_OUTPUT.PUT_LINE('Salary              :'||vn_salary);
	DBMS_OUTPUT.PUT_LINE('------------------------------------');
	DBMS_OUTPUT.PUT_LINE('TEMPORARY ADDRESS');
	DBMS_OUTPUT.PUT_LINE('------------------');
	DBMS_OUTPUT.PUT_LINE('STREET              :'||vc_temp_street);
	DBMS_OUTPUT.PUT_LINE('CITY                :'||vc_temp_city);
	DBMS_OUTPUT.PUT_LINE('COUNTRY             :'||vc_temp_country);
	DBMS_OUTPUT.PUT_LINE('------------------------------------');
	DBMS_OUTPUT.PUT_LINE('PERMANENT ADDRESS');
	DBMS_OUTPUT.PUT_LINE('------------------');
	DBMS_OUTPUT.PUT_LINE('STREET              :'||vc_per_street);
	DBMS_OUTPUT.PUT_LINE('CITY                :'||vc_per_city);
	DBMS_OUTPUT.PUT_LINE('COUNTRY             :'||vc_per_country);
	DBMS_OUTPUT.PUT_LINE('------------------------------------');
	DBMS_OUTPUT.PUT_LINE('Email               :'||vc_email);
	DBMS_OUTPUT.PUT_LINE('Leader              :'||vc_leader);
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');

EXCEPTION
	WHEN no_data_found THEN
		DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
		RAISE_APPLICATION_ERROR (-20001,'ERROR! NO SUCH DATA FOUND! DID YOU ENTER A VALID VALUE?');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
		RAISE_APPLICATION_ERROR (-20001,'AN ERROR OCCURED');
END proc_show_staff_address;
/

SHOW ERRORS


----------------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------Procedures with other purposes---------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------


-- This procedure increases salary of the staff provided
-- The first parameter takes staff_id for providing the staff whose salary is to be raised
-- The second parameter takes the percentage the salary is to be raised
CREATE OR REPLACE PROCEDURE proc_increase_salary(in_staff_id IN staff.staff_id%TYPE,in_percent IN NUMBER) IS

	vn_salary NUMBER(10,2);
	vn_previous_salary NUMBER(10,2);

BEGIN 
	SELECT salary
	INTO vn_previous_salary
	FROM staff
	WHERE staff_id= in_staff_id;
	
	vn_salary:=func_increase_salary(vn_previous_salary, in_percent);

	UPDATE staff
	SET salary = vn_salary
	WHERE staff_id = in_staff_id;
	
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	DBMS_OUTPUT.PUT_LINE('Salary Sucessfully Updated');
	DBMS_OUTPUT.PUT_LINE('Previous Salary : '||vn_previous_salary);
	DBMS_OUTPUT.PUT_LINE('Current Salary  : '||vn_salary);
	
END proc_increase_salary;
/

SHOW ERRORS


----------------------------------------------------------------------------------------------------------------------------


-- This procedure discounts price of the location provided
-- The first parameter takes location_id for providing the location for which the price is to be discounted
-- The second parameter takes the percentage the price is to be reduced
CREATE OR REPLACE PROCEDURE proc_discount_location(in_location_id IN locations.location_id%TYPE, in_percent IN NUMBER) IS

	vn_discounted NUMBER(10,2);
	vn_price NUMBER(10,2);

BEGIN 
	SELECT price
	INTO vn_price
	FROM locations
	WHERE location_id= in_location_id;
	
	vn_discounted:=func_discount_location(vn_price, in_percent);

	UPDATE locations
	SET price = vn_discounted
	WHERE location_id = in_location_id;
	
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	DBMS_OUTPUT.PUT_LINE('Location Successfully Updated');
	DBMS_OUTPUT.PUT_LINE('Previous Price       : '||vn_price);
	DBMS_OUTPUT.PUT_LINE('Price After Discount : '||vn_discounted);
	
END proc_discount_location;
/

SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------


-- PROCEDURE TO GET USERNAME AND PASSWORD FROM STAFF ID
-- Uses the functions func_username and func_password
CREATE OR REPLACE PROCEDURE proc_username_password(in_staff_id IN staff.staff_id%TYPE) IS

vc_username VARCHAR2(5);
vc_password VARCHAR2(5);

BEGIN 
	vc_username:= func_username(in_staff_id);
	vc_password:=func_password(in_staff_id);
	
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	DBMS_OUTPUT.PUT_LINE('USERNAME = '||vc_username);
	DBMS_OUTPUT.PUT_LINE('PASSWORD = '||vc_password);
EXCEPTION
WHEN no_data_found THEN
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	RAISE_APPLICATION_ERROR (-20001,'ERROR! NO SUCH DATA FOUND! DID YOU ENTER A VALID VALUE?');
WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	RAISE_APPLICATION_ERROR (-20001,'AN ERROR OCCURED');
END proc_username_password;
/
SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------

-- PROCEDURE TO FIND HOW MANY GROUPS OF SPECIFIC SIZE CAN FIT IN A LOCATION
-- The first parameter is location_id for the location to be checked
-- The second parameter is the group size

-- The procedure checks the number of groups of provided size that can fit in the provided location.
-- It also displays the number of seats not enough for adding another group of the same size
 
CREATE OR REPLACE PROCEDURE proc_location_capacity_ck(in_location_id NUMBER, in_group_size NUMBER) AS
	vn_num_groups NUMBER(3);
	vn_mod_groups NUMBER(3);
	vn_rem_groups NUMBER(3);
	vn_capacity locations.capacity%TYPE;
	
BEGIN
	SELECT capacity INTO vn_capacity FROM locations WHERE location_id = in_location_id;
	
	vn_num_groups := FLOOR(vn_capacity / in_group_size);
	vn_mod_groups := MOD(vn_capacity, in_group_size); -- MOD uses FLOOR
	vn_rem_groups := REMAINDER(vn_capacity, in_group_size); --Remainder uses ROUND
	
	IF vn_rem_groups<0 THEN
		vn_rem_groups := vn_rem_groups*-1;
	END IF;
	
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
	DBMS_OUTPUT.PUT_LINE(vn_num_groups||' GROUPS OF '||in_group_size||' CAN FIT IN THE PROVIDED LOCATION WITH CAPACITY '||vn_capacity);
	DBMS_OUTPUT.PUT_LINE('NUMBER OF EMPTY SEATS: ' || vn_mod_groups);
	IF vn_rem_groups = vn_mod_groups THEN
		vn_rem_groups := vn_num_groups * in_group_size + in_group_size - vn_capacity;
	END IF;
	DBMS_OUTPUT.PUT_LINE('NUMBER OF ADDITIONAL SEATS NEEDED FOR ADDING ANOTHER GROUP: ' || vn_rem_groups);
	
	DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------');
END proc_location_capacity_ck;
/
SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------

--This procedure displays first name of a staff as one character per line
--The parameter takes in staff_id
--Using loop end loop
CREATE OR REPLACE PROCEDURE proc_staff_firstname(in_staff_id NUMBER) AS
	vn_length NUMBER(3);
	vn_counter NUMBER(3):= 1;
	vc_firstname staff.firstname%TYPE;
BEGIN
	SELECT firstname INTO vc_firstname FROM staff WHERE staff_id = in_staff_id;
	vn_length := LENGTH(vc_firstname);
	LOOP
		DBMS_OUTPUT.PUT_LINE(SUBSTR(vc_firstname, vn_counter, 1));
		IF vn_counter = vn_length THEN
			EXIT;
		END IF;
		vn_counter := vn_counter + 1;
	END LOOP;
END proc_staff_firstname;
/
SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------

--This procedure displays last name of a staff as one character per line
--The parameter takes in staff_id
--Using exit when
CREATE OR REPLACE PROCEDURE proc_staff_surname(in_staff_id NUMBER) AS
	vn_length NUMBER(3);
	vn_counter NUMBER(3):= 1;
	vc_surname staff.lastname%TYPE;
BEGIN
	SELECT lastname INTO vc_surname FROM staff WHERE staff_id = in_staff_id;
	vn_length := LENGTH(vc_surname);
	LOOP
		DBMS_OUTPUT.PUT_LINE(SUBSTR(vc_surname, vn_counter, 1));
		EXIT WHEN vn_counter = vn_length;
		vn_counter := vn_counter + 1;
	END LOOP;
END proc_staff_surname;
/
SHOW ERRORS

----------------------------------------------------------------------------------------------------------------------------






